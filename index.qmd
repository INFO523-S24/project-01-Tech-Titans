---
title: "Big Tech Stock Prices"
subtitle: "An analysis of 14 Big Tech stocks from 2010 - 2020"
author: "Tech Titans"
format: 
  html:
    embed-resources: true
toc: true
execute:
  warning: false
  message: false
  results: hide 
  echo: false
editor: visual
jupyter: python3
---

## Abstract

The goal of this project is to understand the temporal behavior of Big Tech stocks that are actively traded on the NYSE. This analysis will show trends in the market to understand times when the market was on a downtrend (bear market) or in an uptrend (bull market). This will provide insight into times when investments should be made or when they should be pulled back. Investment analyses such as the aformentioned are extremely valuable to large finanacial institutions that aim to benefit from growth in the market. This is extremely important for those who place their hard earned dollar with these institutions as a means to save for retirement.

The analysis will consist of answering two key questions in a sequential manner: exploratory data analysis (EDA), data wrangling, and data visualization. This process is key to gaining insight from the data and allows for a clean platform that can used to train machine learning models.
```{python}
#| label: load-pkgs
#| message: false

# Importing the required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
from scipy import stats


# Loading Data
stocks = pd.read_csv('data/big_tech_stock_prices.csv')
companies = pd.read_csv('data/big_tech_companies.csv')


```

## Introduction to the Dataset

The dataset used in this analysis was sourced from Tidy Tuesday; an open source conglomeration of data for visualization and machine learning. The dataset contains information on 14 different Big Tech companies's stock price and trading volume from 2010 to 2022 on the New York Stock Exchange. There are two .csv (comma seperated variable) files used, one called "big_tech_stock_prices.csv" and another called "big_tech_companies.csv". For simplicity, the files are renamed "stocks" and "companies", respectively. Stocks contains a majority of the information used in this analysis, including the daily low, high, open, and close prices, as well as trading volume. Low price represents the lowest price for the day while high price represents the opposite. Open price represents the price when the market opens at 9:30am ET, and close price represents the price when the market closes at 4pm ET. Trading volume represents the amount of stocks bought and sold that day; this metric is important for understanding the popularity of the stock.

The interest in this dataset was sparked by its potential to provide valuable insights into the stock market behavior of big tech companies. This enables a comprehensive examination of stock market trends, facilitates comparisons across various companies, and aids in assessing the influence of significant external events on stock valuations.


## Q1: How do stock prices change over time based on basic economic metrics


### Introduction

To answer the question of how stock prices change over time, the daily price movement and volume will be visualized. Looking at price changes temporally will provide insights into past trends in the stock market. The stock market is cyclical, and thus finding patterns in the past data will allow for insights into future movements of the stock market. This is benefical because it can lead to knowledge of when a stock price will rise. The interest in this question is based on team interest in investing and making low-risk financial decisions. 
 
``` {python}
# Step 1: Exploratory Data Analysis (EDA)
df = stocks.copy()

# Convert the date column to datetime format
df['date'] = pd.to_datetime(df['date'])

# Summary Statistics
company_stats = df.groupby('stock_symbol').agg({'open': ['mean', 'median', 'min', 'max', 'std'], 'volume': ['mean', 'median', 'min', 'max', 'std']})
print("Summary Statistics:")
print(company_stats)






```

### Approach

To begin the analysis of question one, the data is first summarized for basic statistics such as mean, median, standard deviation for both price variation and trading volume. This allows for a basic understanding of the distribution of the data and how metrics such as outliers influence the spread of the data. Once a basic understanding of the data is formed, the data is then visualized. 

One step that is typically used for raw, uncleaned data is filtering. This allows for the data to be manipulated to ensure a normal distribution (or other distribution required by the ML model). In the case of this analysis, filtering and cleaning is not needed because the data is already in a form that can be visualized easily. 

Finally, the data is visualized in three plots, a candlestick plot, a line plot, and a bar plot. The candlestick plot is a line plot where each data point is a bar that shows the open, close, high, and low prices. The size of the bar represents the volume of stocks traded in that day. The bars are then connected by a line and when looking at the entire time frame, trends can be seen. The line plot will be used to show the closing prices over time. The bar plot will show the overall volume of trading of each stock in the entire time frame. These three plots will be plotly objects, and thus can be manipuated and zoomed in on to see trends both globally and regionally over the time period. The candle stick will provide a convient display of all the data, while the line and bar plots break down the candle stick plot to scrutinize the data on a magnified scale. 

### Analysis


``` {python}

# Initialize an empty list to store candlestick traces for all companies
candlestick_traces = []

# Loop through each company and create a candlestick trace
for company in stocks['stock_symbol'].unique():
    df_company = stocks[stocks['stock_symbol'] == company]
    candlestick_trace = go.Candlestick(x=df_company['date'],
                                       open=df_company['open'],
                                       high=df_company['high'],
                                       low=df_company['low'],
                                       close=df_company['close'],
                                       name=f"{company} Candlestick")
    candlestick_traces.append(candlestick_trace)

# Create the figure
fig = go.Figure(data=candlestick_traces)

# Customize the layout
fig.update_layout(title='Stock Prices of Big Tech Stocks (2010 - 2022)<br><sup>Kaggle via Yahoo Finance | Tidy Tuesday 2023</sup>',
                  xaxis_title='Date',
                  yaxis_title='Price',
                  xaxis_rangeslider_visible=False,
                  width=1000,
                  margin=dict(l=40, r=40, t=60, b=20)
                  )

# Show the figure
fig.show()













```





``` {python}

stocks = companies['stock_symbol'].values.tolist()
# Creating a DataFrame to hold all the stock data
# For simplicity, let's generate some random closing prices
all_stock_data = df

# Create a Plotly figure
fig = go.Figure()

# Add a line for each stock
for stock in stocks:
    stock_data = df[df['stock_symbol'] == stock]
    fig.add_trace(go.Scatter(x=stock_data['date'], y=stock_data['close'], mode='lines', name=stock))

# Customize the layout
fig.update_layout(
    title='Stock Close Prices Over Time (2010 - 2022)<br><sup>Kaggle via Yahoo Finance | Tidy Tuesday 2023</sup>',
    xaxis_title='Date',
    yaxis_title='Close Price',
    height=600,
    margin=dict(l=40, r=40, t=60, b=20)
)

# Show the figure

fig.show()
```






``` {python}
# Calculate average volume traded for each stock symbol
avg_volume = df.groupby('stock_symbol')['volume'].mean().sort_values()

# Create a bar trace
bar_trace = go.Bar(
    x=avg_volume.index,  # Stock symbols
    y=avg_volume.values,  # Average volume
    marker_color='skyblue'
)

# Create a layout
layout = go.Layout(
    title='Average Volume Traded per Year for Each Stock Symbol <br><sup>Kaggle via Yahoo Finance | Tidy Tuesday 2023</sup>',
    xaxis=dict(title='Stock Symbol'),
    yaxis=dict(title='Average Volume (Shares Traded)'),
    xaxis_tickangle=-45,
    margin=dict(l=40, r=40, t=60, b=20)
)

# Create a figure
fig = go.Figure(data=[bar_trace], layout=layout)

# Show the figure
fig.show()

```

### Discussion

The findings from data preprocessing and visualization reveals multiple insights. First, beyond cyclical fluxations, the price of every stock has increased since the initial 2010 open. Additionally, not all companies existed in 2010 and thus it can be seen that some stocks don't appear until after 2010. Another valuable insight found was the large increase in growth of a majority of the companies in 2018. If this trend is to continue, it is beneficial to invest in the market now, though it would be wise to view other companies that have experienced exponential growth and review the times before prices settled to a lower value, the dot com boom of the early 2000s would be a good case study. 

Looking at the bar plot of all companies, it is clear that Apple was the most popular stock in the dataset, this is clear from its 150% larger volume than the next most traded stock. Finally, the crash caused by the COVID-19 pandemic is clearly visible across all the companies, when in the March of 2020, stock prices plummetted.

## Q2  Backwards verification: if we invested x amount of dollars in 2010, how much would it be worth in 2022, when would be a good/bad time to pull investment out of the market.


### Introduction

A fundamental question for any investor is understanding how an initial investment grows over time. This analysis aims to determine the value of an investment made in 2010 in various technology stocks and its worth in 2022. To answer this, we'll need the historical closing prices of each stock, which will help us to calculate the investment's growth over the specified period. The second part of the analysis aims to determine good and bad times to pull an investment out of the market.

First, we're loading up all the stock and company information from two CSV files. We then make copies of this data to work with, ensuring we don't mess with the original files. The goal here is to gather basic statistics like the average, median, highest, lowest, and standard deviation for various aspects of the stock prices, such as the opening and closing prices. This provides us with a summary that gives a broad overview of each stock's performance over time.

``` {python}
#| label: Data-Analysis-Q2

# Load the CSV files
stocks = pd.read_csv('data/big_tech_stock_prices.csv')
companies = pd.read_csv('data/big_tech_companies.csv')
# Copy the DataFrames to avoid modifying the original data
df_stocks = stocks.copy()
df_companies = companies.copy()
# Now you can proceed with your groupby aggregation
investment_stats = df_stocks.groupby('stock_symbol').agg({
    'open': ['mean', 'median', 'min', 'max', 'std'],
    'high': ['mean', 'median', 'min', 'max', 'std'],
    'low': ['mean', 'median', 'min', 'max', 'std'],
    'close': ['mean', 'median', 'min', 'max', 'std'],
    'adj_close': ['mean', 'median', 'min', 'max', 'std'],
    'volume': ['mean', 'median', 'min', 'max', 'std']
})
print("Summary Statistics:")
print(investment_stats)

```

Next, we're double-checking to make sure our data doesn't have any gaps (missing values). Then, we're doing some detective work to spot any weird or extreme data points—what we call 'outliers'—that might throw off our analysis. We use the method Z-score to find these outliers, which helps us measure how unusual a data point is. If it's too far from what's normal (more than 3 standard deviations), we remove it to keep our data clean.

``` {python}
#| label: Data-Wrangling-Q2

# Handle missing values(No missing values)
print("Null Values from Stocks dataset", stocks.isnull().sum())
print("Null Values from companies dataset", companies.isnull().sum())

# Outlier Detection and Treatment
# Calculate the Z-score for the 'adj_close' column
df_stocks['z_score'] = stats.zscore(df_stocks['adj_close'])
# Remove outliers beyond 3 standard deviations
df_stocks = df_stocks[df_stocks['z_score'].abs() <= 3]

```


### Approach

To understand how an investment has grown, we'll look at the stock prices at the start of 2010 and compare them to the end of 2022. We'll adjust these prices so that they all start at the same point, which makes it fair to compare different stocks. This way, we're not distracted by some stocks being naturally more expensive than others; we're focusing purely on how much they have grown proportionally.

We're going to use line charts to show this growth over time. Each company's growth curve will have its own color, making it easy to see which stocks are stars and which are not. These charts help us spot the times when stocks were soaring and when they were not doing so well.

To understand when to buy or sell a stock, we'll use a common technique called the moving average crossover. Think of this as tracking two different running averages of a stock's price: one that looks at the last 50 days (short-term view) and another that looks at the last 200 days (long-term view). When the short-term line crosses above the long-term line, it’s like a green light that the stock's price might be heading up—a hint that it might be a good time to buy. When it crosses below, it’s a red flag that prices could be going down, suggesting it might be time to sell.

We'll map these two averages onto a chart, which will help us spot exactly where these crossovers happen. It’s a straightforward method but well-regarded in the finance world for spotting when a stock's trend might be changing direction.

Our analysis will calculate these two averages for each stock and lay them over a chart of the stock's actual prices. We're looking for where these average lines cross over each other—these are the critical moments that might signal to investors to act. To showcase this, we'll use a type of chart called a candlestick chart, which is great for showing not just the average trends, but also giving us a detailed snapshot of stock price movements over time.

### Analysis

Let's assume we put $1,000 into each stock at the beginning of 2010. We'll use our adjusted prices to track how much that $1,000 would have turned into by 2022. By looking at the charts for each stock, we can see the final tally for our investment as of 2022, giving us a clear picture of where our hypothetical $1,000 would have taken us over 12 years.


```{python}
#| label: Stock-Close-Prices-Over-Time
stocks = companies['stock_symbol'].values.tolist()

# Creating a DataFrame to hold all the stock data
all_stock_data = df_stocks

# Create a Plotly figure
fig = go.Figure()

# Add a line for each stock
for stock in stocks:
    stock_data = df_stocks[df_stocks['stock_symbol'] == stock]
    fig.add_trace(go.Scatter(x=stock_data['date'], y=stock_data['close'], mode='lines', name=stock))

# Customize the layout
fig.update_layout(
    title='Stock Close Prices Over Time',
    xaxis_title='Date',
    yaxis_title='Close Price',
    height=800
)

# Show the figure
fig.show()
```

In this part, We take the list of stock symbols and create a line graph for each stock that shows how its closing price has changed day by day. The result is a colorful chart where each line represents a company's stock, making it easy to see how stock prices have moved over time.

```{python}
#| label: Normalized-Stock-Close-Prices
start_date = "2010-01-01"
filtered_data = all_stock_data[all_stock_data['date'] >= start_date]

# Normalize each stock's prices to start from a base (e.g., 100)
base = 10
for stock in stocks:
    initial_price = filtered_data[filtered_data['stock_symbol'] == stock].iloc[0]['close']
    filtered_data.loc[filtered_data['stock_symbol'] == stock, 'Normalized Close'] = base * (filtered_data['close'] / initial_price)

# Create a Plotly figure
fig = go.Figure()

# Add a line for each stock's normalized close prices
for stock in stocks:
    stock_data = filtered_data[filtered_data['stock_symbol'] == stock]
    fig.add_trace(go.Scatter(x=stock_data['date'], y=stock_data['Normalized Close'], mode='lines', name=stock))

# Customize the layout
fig.update_layout(
    title='Normalized Stock Close Prices Over Time',
    xaxis_title='Date',
    yaxis_title='Normalized Close Price',
    height=600
)

# Show the figure
fig.show()

```

In this part, we're starting all the stocks from the same line ('normalization'), so we can compare them fairly. Imagine every stock begins at $10 in 2010, and we track how this value changes. This gives us a clear picture of each stock's performance relative to the others, regardless of their actual price differences. We draw this out on a chart, so it's easy to follow their growth over the years.

``` {python}
#| label: Data-Visualization-Q2-Part2

df_AAPL = df_stocks[df_stocks['stock_symbol'] == 'AAPL']

start_date = "2013-01-01"
df_AAPL = df_AAPL[df_AAPL['date'] >= start_date]

# Calculate 200DMA and 50DMA
df_AAPL['200DMA'] = df_AAPL['close'].rolling(window=200).mean()
df_AAPL['50DMA'] = df_AAPL['close'].rolling(window=50).mean()

# Creating the candlestick chart
fig = go.Figure()

# Add Candlestick trace
fig.add_trace(go.Candlestick(x=df_AAPL['date'],
                open=df_AAPL['open'], high=df_AAPL['high'],
                low=df_AAPL['low'], close=df_AAPL['close'],
                name='Candlestick'))

# Add 200DMA Line trace
fig.add_trace(go.Scatter(x=df_AAPL['date'], y=df_AAPL['200DMA'],
                         mode='lines', name='200DMA',
                         line=dict(color='blue', width=2)))

# Add 50DMA Line trace
fig.add_trace(go.Scatter(x=df_AAPL['date'], y=df_AAPL['50DMA'],
                         mode='lines', name='50DMA',
                         line=dict(color='red', width=2)))

# Customize the layout
fig.update_layout(title='Stock Price with 200DMA and 50DMA',
                  xaxis_title='Date',
                  yaxis_title='Price',
                  xaxis_rangeslider_visible=False,  # Hides the range slider
                  height=600)

# Show the figure
fig.show()
```

In this part, we're focusing on Apple's stock (AAPL) as an example, and we're using two smoothed-out lines to help us decide when might be a good time to buy or sell. These lines represent the average closing price over the last 50 and 200 days. We plot these on a special kind of graph called a 'candlestick chart', which not only shows the average trends but also the daily price movements in more detail. This chart helps us spot those key moments where the short-term average crosses over the long-term average, which can signal whether it's potentially a good time to get in or out of the market.

### Discussion

Insights into investment strategies and market dynamics.

 By leveraging historical market data and DMA models, we gained a understanding of how different investment options perform over time. This allowed us to identify trends and patterns that could inform investment decisions, such as identifying stocks with consistent growth or bonds with stable returns. There are a few perceptions on the visualizations. In 2010, IBM stood out with the highest close price among the companies analyzed. From 2018 to 2022, there was a notable exponential growth in stock close prices. By 2021, both Netflix and ADE were nearly on par with their close prices. However, they both experienced declines afterward. Apart from Tesla and Netflix, the other companies remained relatively stable in their normalized stock market performance. Netflix maintained stability in its stock market performance.

 Market conditions are subject to change, and unforeseen events or economic factors can impact investment performance. Therefore, it's essential for investors to continuously monitor and adapt their strategies in response to evolving market dynamics. Analyzing daily price data using the 200-day moving average (DMA) and the 50-day DMA method revealed that the 50 DMA consistently showed stronger pricing performance compared to the 200 DMA.