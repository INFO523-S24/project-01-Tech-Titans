{
  "hash": "be16844deeb0a32de0f52d391bf7d7d2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Big Tech Stock Prices\nsubtitle: Analyzing Big Tech stock prices from 2010 to 2022\nauthor: Tech Titans\nformat: html\neditor: visual\n---\n\n## Abstract\n\nAdd project abstract here.\n\n::: {#load-pkgs .cell message='false' execution_count=1}\n``` {.python .cell-code}\n# Importing the required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Loading Data\nstocks = pd.read_csv('data/big_tech_stock_prices.csv')\ncompanies = pd.read_csv('data/big_tech_companies.csv')\n\n```\n:::\n\n\n## Q1: How do stock prices change over time, looking at the basic information like open, close, high, low etc.**\n\n\n### EDA\n\n::: {#0d90d10a .cell execution_count=2}\n``` {.python .cell-code}\n# Step 1: Exploratory Data Analysis (EDA)\ndf = stocks.copy()\n\n# Convert the date column to datetime format\ndf['date'] = pd.to_datetime(df['date'])\n\n# Summary Statistics\ncompany_stats = df.groupby('stock_symbol').agg({'open': ['mean', 'median', 'min', 'max', 'std'], 'volume': ['mean', 'median', 'min', 'max', 'std']})\nprint(\"Summary Statistics:\")\nprint(company_stats)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSummary Statistics:\n                    open                                                 \\\n                    mean      median        min         max         std   \nstock_symbol                                                              \nAAPL           51.274171   29.745001   6.870357  182.630005   47.316509   \nADBE          186.023938   97.589996  22.969999  696.280029  173.562115   \nAMZN           58.937204   36.325001   5.296500  187.199997   54.138607   \nCRM           103.419948   76.290001  15.522500  310.000000   71.287894   \nCSCO           33.493880   29.500000  13.930000   64.040001   12.643887   \nGOOGL          49.149625   38.521000  10.968719  151.250000   35.809816   \nIBM           148.427471  143.173996  90.439774  205.908218   23.998357   \nINTC           36.481406   34.270000  17.879999   68.199997   12.912534   \nMETA          147.874275  141.620002  18.080000  381.679993   86.734656   \nMSFT          100.048490   55.660000  23.090000  344.619995   88.228008   \nNFLX          188.242206  110.010002   6.960000  692.349976  178.967463   \nNVDA           50.560335   11.902500   2.180000  335.170013   69.538684   \nORCL           46.242177   41.750000  21.459999  104.290001   16.864193   \nTSLA           58.859467   16.229000   1.076000  411.470001   95.677282   \n\n                    volume                                                   \n                      mean       median       min         max           std  \nstock_symbol                                                                 \nAAPL          2.563255e+08  166674000.0  35195900  1880998000  2.225768e+08  \nADBE          3.814337e+06    2948500.0    589200   108752400  3.598144e+06  \nAMZN          8.833999e+07   74592000.0  17626000   848422000  5.309249e+07  \nCRM           6.910973e+06    5548800.0   1084700    64562800  5.048860e+06  \nCSCO          3.269656e+07   25482400.0   5720500   560040200  2.570963e+07  \nGOOGL         6.018647e+07   41234000.0   9312000   592399008  4.957963e+07  \nIBM           5.036545e+06    4345189.0   1247878    39814421  2.772073e+06  \nINTC          3.607170e+07   29874600.0   5893800   199002600  2.123178e+07  \nMETA          3.117815e+07   23239000.0   5913100   573576400  2.713267e+07  \nMSFT          3.801647e+07   32280800.0   7425600   319317900  2.147328e+07  \nNFLX          1.841485e+07   11961800.0   1144000   315541800  2.054316e+07  \nNVDA          5.080613e+07   43395600.0   4564400   369292800  3.210953e+07  \nORCL          1.801856e+07   14699800.0   2754900   183503900  1.251053e+07  \nTSLA          9.351647e+07   75914250.0   1777500   914082000  8.164780e+07  \n```\n:::\n:::\n\n\n### Data Wrangling\n\n::: {#c1f12115 .cell execution_count=3}\n``` {.python .cell-code}\n# Step 2: Data Wrangling\n# Handle missing values(No missing values)\n\n```\n:::\n\n\n### Data Visualization \n\n\nClosing Prices Over Time for Different Companies\n\n::: {#70684a43 .cell execution_count=4}\n``` {.python .cell-code}\n# Company-wise Visualizations\nplt.figure(figsize=(12, 8))\nfor company, data in df.groupby('stock_symbol'):\n    plt.plot(data['date'], data['close'], label=company)\nplt.title('Closing Prices Over Time for Different Companies')\nplt.xlabel('Date')\nplt.ylabel('Close Price')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=965 height=671}\n:::\n:::\n\n\nVolume Analysis using Bar Plot\n\n::: {#d0f89a52 .cell execution_count=5}\n``` {.python .cell-code}\n# Volume Analysis\navg_volume = df.groupby('stock_symbol')['volume'].mean().sort_values()\n\n# Plotting\nplt.figure(figsize=(10, 6))\navg_volume.plot(kind='bar', color='skyblue')\nplt.title('Average Volume Traded for Each Stock Symbol')\nplt.xlabel('Stock Symbol')\nplt.ylabel('Average Volume (Shares Traded)')  # Unit added\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=949 height=565}\n:::\n:::\n\n\n```\n\n## Q2\n\n### EDA\n\n### Data Wrangling\n\n### Data Visualization \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}